# mac users should have all in place
# 1. $gem install rake
# 2. $cd some/path/rainbow4firebug
# 3. $rake
#
# win users:
# 1. install binary ruby (unzip to C:\ruby)
# 2. set C:\ruby\bin to system path
# 3. download and install ruby gems (http://www.rubygems.org/read/chapter/3)
# 5. solve dll problems:
# 5.a) download openssl 0.98e or later here (http://smithii.com/openssl), copy ssleay32.dll and libeay32.dll to your C:\ruby\bin
# 5.b) download zlib binary here (http://gnuwin32.sourceforge.net/downlinks/zlib-bin-zip.php), rename zlib1.dll to zlib.dll, and copy it to your C:\ruby\bin
# 6. >gem install win32console
# 7. >gem install rake
# 8. install zip to system path (http://www.info-zip.org/Zip.html)
# 9. >cd some\path\rainbow4firebug
#10. >rake

ROOT = File.expand_path('.')
ADDON = File.expand_path(File.join(ROOT, '..', 'firepython-addon')) # firepython-addon is expected to be at same directory level as firepython project
FIREFOX = File.join(ADDON, 'firefox')
DST = File.join(ROOT, 'build')
TMP = File.join(ROOT, 'tmp')
JSONPICKLE = File.join(ROOT, 'jsonpickle')
PYTHON = ROOT

# http://kpumuk.info/ruby-on-rails/colorizing-console-ruby-script-output/
begin
  require 'Win32/Console/ANSI' if PLATFORM =~ /win32/
rescue LoadError
  raise 'You must "gem install win32console" to use terminal colors on Windows'
end

def colorize(text, color_code)
  "#{color_code}#{text}\e[0m"
end

def red(text); colorize(text, "\e[31m"); end
def green(text); colorize(text, "\e[32m"); end
def yellow(text); colorize(text, "\e[33m"); end
def blue(text); colorize(text, "\e[34m"); end
def magenta(text); colorize(text, "\e[35m"); end
def azure(text); colorize(text, "\e[36m"); end
def white(text); colorize(text, "\e[37m"); end
def black(text); colorize(text, "\e[30m"); end

def file_color(text); yellow(text); end
def dir_color(text); blue(text); end
def cmd_color(text); azure(text); end

#
# you can use FileUtils: http://corelib.rubyonrails.org/classes/FileUtils.html
#
require 'find'

# copies directory tree without .svn, .git and other temporary files
def cp_dir(src, dst)
  puts "#{cmd_color('copying')} #{dir_color(src)}"
  puts "     -> #{dir_color(dst)}"
  Find.find(src) do |fn|
    next if fn =~ /\/\./
    next if fn =~ /Thumbs\.db/
    r = fn[src.size..-1]
    if File.directory? fn
      mkdir(File.join(dst, r), {:verbose => false}) unless File.exist? File.join(dst,r)
    else
      cp(fn, File.join(dst, r), {:verbose => false})
    end
  end
end

def cp_file(src, dst)
  puts "#{cmd_color('copying')} #{file_color(src)}"
  puts "     -> #{file_color(dst)}"
  cp(src, dst, {:verbose => false})
end

def dep(src)
  s = File.expand_path src
  rs = s[FIREFOX.size..-1]
  d = File.join(TMP, rs)
  puts "#{cmd_color('copying')} #{file_color(s)}"
  puts "     -> #{file_color(d)}"
  cp(s, d, {:verbose => false})
end

def dep2(src, add='')
  s = File.expand_path src
  rs = s[ROOT.size..-1]
  d = File.join(TMP, add, rs)
  puts "#{cmd_color('copying')} #{file_color(s)}"
  puts "     -> #{file_color(d)}"
  cp(s, d, {:verbose => false})
end

def my_mkdir(dir)
  puts "#{cmd_color('creating directory')} #{dir_color(dir)}"
  mkdir(dir, {:verbose => false})
end

def parse_version()
  f = File.new(File.join(FIREFOX, 'install.rdf'))
  text = f.read
  unless text=~/<em:version>([^<]*)<\/em:version>/
    puts "#{red('Version not found')}"
    exit
  end
  $1
end

def die(s)
  puts(red(s))
  exit(1)
end

def patch(filepath, matcher, replacer)
  puts "Patching #{blue(filepath[ROOT.size+1..-1])} with #{yellow(replacer.to_s)}"
  applied = false
  lines = []
  File.open(filepath, 'r') do |f|
    f.each do |line|
      lines << line.gsub(matcher, replacer)
      applied ||= lines[-1]!=line
    end
  end
  File.open(filepath, "w") do |f|
    f << lines
  end
  applied
end

def check_if_addon_exists()
  die("firepython-addon not found!\n  expected to be in #{ADDON}") unless File.exists?(ADDON)
end

################################################################################

desc "Prepare XPI"
task :default do
  check_if_addon_exists()
  version = parse_version()

  remove_dir(TMP) if File.exists?(TMP) # recursive!
  mkdir(TMP, {:verbose => false})
  cp_dir(File.join(FIREFOX, 'chrome'), File.join(TMP, "chrome"))
  cp_dir(File.join(FIREFOX, 'defaults'), File.join(TMP, "defaults"))
  dep(File.join(FIREFOX, 'chrome.manifest'))
  dep(File.join(FIREFOX, 'install.rdf'))
  dep(File.join(FIREFOX, 'license.txt'))
  my_mkdir(DST) unless File.exist?(DST)
  
  firepython_js_path = File.join(TMP, "chrome", "content", "firepython.js")
  patch(firepython_js_path, /(dbg\(.*\);)/, "/*\\1*/")

  res = "#{DST}/firepython-#{version}.xpi"
  File.unlink(res) if File.exists?(res)
  puts "#{cmd_color('zipping')} #{file_color(res)}"
  Dir.chdir(TMP) do
    puts red('need zip on command line (download http://www.info-zip.org/Zip.html)') unless system("zip -r \"#{res}\" *");
  end
  remove_dir(TMP) if File.exist?(TMP) # recursive!
  
  puts "\ninstaller is in #{yellow(res)}, enjoy!"
end

desc "Update PyPI index and upload library sources"
task :pypi do
  remove_dir(TMP) if File.exists?(TMP) # recursive!
  mkdir(TMP, {:verbose => false})

  dep2(File.join(ROOT, 'README.markdown'))
  dep2(File.join(ROOT, 'license.txt'))
  dep2(File.join(ROOT, 'setup.py'))

  firepython_dir = File.join(TMP, 'firepython')
  my_mkdir(firepython_dir) unless File.exist?(firepython_dir)
  dep2(File.join(ROOT, '__init__.py'), 'firepython')
  dep2(File.join(ROOT, 'gaesupport.py'), 'firepython')
  dep2(File.join(ROOT, 'middleware.py'), 'firepython')
  dep2(File.join(ROOT, 'utils.py'), 'firepython')
  dep2(File.join(ROOT, 'handlers.py'), 'firepython')
  
  Dir.chdir(TMP) do
    system("python setup.py register") or die("register failed")
    system("python setup.py sdist upload") or die("upload failed")
  end 

  remove_dir(TMP) if File.exist?(TMP) # recursive!
end

desc "Resets version in all relevant sources"
task :version do
  check_if_addon_exists()
  version = ARGV[1] or die("Please specify a version as first parameter")
  firepython_js_path = File.join(FIREFOX, 'chrome', 'content', 'firepython.js')
  if not patch(firepython_js_path, /version: '([0-9\.])+'/, "version: '#{version}'")
    puts "  #{red("patching had no effect")}"
  end
  init_py_path = File.join(PYTHON, 'firepython', '__init__.py')
  if not patch(init_py_path, /__version__ = '([0-9\.])+'/, "__version__ = '#{version}'")
    puts "  #{red("patching had no effect")}"
  end
  install_rdf_path = File.join(FIREFOX, 'install.rdf')
  if not patch(install_rdf_path, /<em:version>([0-9\.])+<\/em:version>/, "<em:version>#{version}</em:version>")
    puts "  #{red("patching had no effect")}"
  end
  exit(0)
end

# Python is a hostile language for me
# google app engine is breaking after setting sys.path (various handler caching issues and bugs)
# witout sys.path I see no other chance than to prepare my own patched version of jsonpickle
desc "Prepares jsonpicke version"
task :jsonpickle do
  repo = ARGV[1] || File.expand_path("~/code/jsonpickle-read-only")
  remove_dir(JSONPICKLE) if File.exists?(JSONPICKLE) # recursive!
  mkdir(JSONPICKLE)
  Dir.chdir(JSONPICKLE) do
    ["COPYING"].each { |file| system("cp \"#{File.join(repo, "src", file)}\" .") }
    
    lines = []
    # bake all into one huge file to get rid of import paths issues
    # also remove import statements and module prefixes
    ['__init__.py', 'util.py', "tags.py", 'pickler.py', 'unpickler.py'].each do |filepath|
      File.open(File.join(repo, "src", "jsonpickle", filepath), 'r') do |f|
        f.each do |line|
          line = line.gsub('from jsonpickle.pickler import Pickler', '')
          line = line.gsub('from jsonpickle.unpickler import Unpickler', '')
          line = line.gsub('import jsonpickle.util as util', '')
          line = line.gsub('import jsonpickle.tags as tags', '')
          line = line.gsub('util.', '')
          line = line.gsub('tags.', '')
          lines << line
        end
      end
    end
    File.open('__init__.py', "w") do |f|
      f << lines
    end
  end
end